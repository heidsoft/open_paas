# -*- coding: utf-8 -*-
"""
Django settings for esb project.

Generated by 'django-admin startproject' using Django 1.8.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/

Copyright © 2012-2017 Tencent BlueKing. All Rights Reserved. 蓝鲸智云 版权所有
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
from django.conf.global_settings import *  # noqa

try:
    import pymysql
    pymysql.install_as_MySQLdb()
except:
    pass

BASE_DIR = os.path.dirname(os.path.abspath(__file__))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '@3dqbfh23ihs)*ffdck21g(f)+)95qnj4i3n2m-yhafl#&@#hx'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition
# Django apps and Middlewares
INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'esb',
    'esb.bkcore',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'esb.middlewares.APICommonMiddleware',
    'esb.middlewares.DebugHelperMiddleware',
)

ROOT_URLCONF = 'urls'

WSGI_APPLICATION = 'wsgi.application'


# Templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.core.context_processors.i18n',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True


# Authentication
AUTHENTICATION_BACKENDS = ('django.contrib.auth.backends.ModelBackend', )


# logging
PROJECT_PATH = os.path.dirname(os.path.abspath(__file__))
PARENT_DIR = os.path.dirname(os.path.dirname(PROJECT_PATH))
LOG_DIR = os.path.join(PARENT_DIR, 'logs')
if not os.path.exists(LOG_DIR):
    os.mkdir(LOG_DIR)

LOG_MAX_BYTES = 524288000    # 500M
LOG_BACKUP_COUNT = 5
LOG_CLASS = 'logging.handlers.RotatingFileHandler'


def get_loggings(log_level):
    return {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                'format': '%(levelname)s [%(asctime)s] %(pathname)s %(lineno)d %(funcName)s %(process)d %(thread)d \n \t %(message)s \n',
                'datefmt': '%Y-%m-%d %H:%M:%S'
            },
            'simple': {
                'format': '%(message)s \n'
            },
            'api_simple': {
                # 不要添加换行符，Elasticsearch日志采集器认为每行均是一个合法JSON字符串
                'format': '%(message)s'
            }
        },
        'handlers': {
            'null': {
                'level': 'DEBUG',
                'class': 'django.utils.log.NullHandler',
            },
            'console': {
                'level': 'DEBUG',
                'class': 'logging.StreamHandler',
                'formatter': 'simple'
            },
            'root': {
                'class': LOG_CLASS,
                'formatter': 'verbose',
                'filename': os.path.join(LOG_DIR, 'esb.log'),
                'maxBytes': LOG_MAX_BYTES,
                'backupCount': LOG_BACKUP_COUNT
            },
            'api': {
                'class': LOG_CLASS,
                'formatter': 'api_simple',
                'filename': os.path.join(LOG_DIR, 'esb_api.log'),
                'maxBytes': LOG_MAX_BYTES,
                'backupCount': LOG_BACKUP_COUNT
            },
        },
        'loggers': {
            'django': {
                'handlers': ['null'],
                'level': 'INFO',
                'propagate': True,
            },
            'django.request': {
                'handlers': ['root'],
                'level': 'ERROR',
                'propagate': True,
            },
            # the root logger, for all the project
            'root': {
                'handlers': ['root'],
                'level': log_level,
                'propagate': False,
            },
            # Logging config for ESB projects
            'api': {
                'handlers': ['api'],
                'level': log_level,
                'propagate': False,
            },
        }
    }


# Static files
SITE_URL = '/'

STATIC_URL = SITE_URL + 'static/'

STATIC_VERSION = '0.0.1'


# component esb_conf
ESB_SITE_ESB_CONF = 'components.esb_conf.config'

# JOB是否启用SSL验证
JOB_SSL = True
# 如果用户未配置config/default.py中的SSL_ROOT_DIR，则使用此目录
DEFAULT_SSL_ROOT_DIR = '/data/paas/ssl_dir'

from configs.default import *  # noqa


LOGGING = get_loggings(LOG_LEVEL)
REDIS_CONF_FOR_RATELIMIT = {}


# 默认超时时间
REQUEST_TIMEOUT_SECS = 30
